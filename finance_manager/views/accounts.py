import customtkinter as ctk
from tkinter import ttk, messagebox
from models.account import Account
from config.settings import ACCOUNT_TYPES
from .dialog import Dialog
from config.colors import *

class AccountsView:
    def __init__(self, parent):
        self.parent = parent
        self.tree = None
        
    def show(self):
        self.create_title()
        self.create_add_button()
        self.show_accounts_list()
        
    def create_title(self):
        title = ctk.CTkLabel(
            self.parent,
            text="Qu·∫£n L√Ω T√†i Kho·∫£n",
            font=("Helvetica", 24, "bold")
        )
        title.pack(pady=20)
        
    def create_add_button(self):
        button_frame = ctk.CTkFrame(self.parent)
        button_frame.pack(pady=10)
        
        add_btn = ctk.CTkButton(
            button_frame,
            text="‚ûï Th√™m T√†i Kho·∫£n M·ªõi",
            command=self.show_add_dialog,
            font=("Helvetica", 13, "bold"),
            fg_color=SUCCESS['main'],
            hover_color=SUCCESS['hover'],
            text_color=TEXT['light']
        )
        add_btn.pack(side="left", padx=5)
        
        edit_btn = ctk.CTkButton(
            button_frame,
            text="‚úèÔ∏è Ch·ªânh S·ª≠a",
            command=self.edit_selected_account,
            font=("Helvetica", 13, "bold"),
            fg_color=PRIMARY['main'],
            hover_color=PRIMARY['hover'],
            text_color=TEXT['light']
        )
        edit_btn.pack(side="left", padx=5)
        
        delete_btn = ctk.CTkButton(
            button_frame,
            text="üóëÔ∏è X√≥a",
            command=self.delete_selected_account,
            font=("Helvetica", 13, "bold"),
            fg_color=DANGER['main'],
            hover_color=DANGER['hover'],
            text_color=TEXT['light']
        )
        delete_btn.pack(side="left", padx=5)
        
    def show_accounts_list(self):
        frame = ctk.CTkFrame(self.parent)
        frame.pack(fill="both", padx=20, pady=10, expand=True)
        
        scrollbar = ttk.Scrollbar(frame)
        scrollbar.pack(side="right", fill="y")
        
        columns = ('ID', 'T√™n T√†i Kho·∫£n', 'S·ªë D∆∞', 'Lo·∫°i')
        self.tree = ttk.Treeview(frame, columns=columns, show='headings', 
                                yscrollcommand=scrollbar.set)
        
        scrollbar.config(command=self.tree.yview)
        
        self.tree.heading('ID', text='ID')
        self.tree.heading('T√™n T√†i Kho·∫£n', text='T√™n T√†i Kho·∫£n')
        self.tree.heading('S·ªë D∆∞', text='S·ªë D∆∞')
        self.tree.heading('Lo·∫°i', text='Lo·∫°i')
        
        self.tree.column('ID', width=50, minwidth=50)
        self.tree.column('T√™n T√†i Kho·∫£n', width=200, minwidth=200)
        self.tree.column('S·ªë D∆∞', width=150, minwidth=150)
        self.tree.column('Lo·∫°i', width=150, minwidth=150)
        
        style = ttk.Style()
        style.configure("Treeview",
                       font=('Helvetica', 11),
                       rowheight=35,
                       background=BACKGROUND['dark'],
                       foreground=TEXT_CONTRAST['light'],
                       fieldbackground=BACKGROUND['dark'])
        
        style.configure("Treeview.Heading",
                       font=('Helvetica', 12, 'bold'),
                       background=BACKGROUND['light'],
                       foreground=TEXT_CONTRAST['dark'])
        
        self.tree.tag_configure('bank', 
                              background=PRIMARY['main'],
                              foreground=TEXT_CONTRAST['light'])
        self.tree.tag_configure('cash', 
                              background=SUCCESS['main'],
                              foreground=TEXT_CONTRAST['light'])
        self.tree.tag_configure('ewallet', 
                              background=WARNING['main'],
                              foreground=TEXT_CONTRAST['light'])
        
        self.refresh_accounts_list()
        self.tree.pack(fill="both", expand=True, padx=5, pady=5)
        
    def refresh_accounts_list(self):
        for item in self.tree.get_children():
            self.tree.delete(item)
            
        for account in Account.get_all():
            if account.type == "T√†i kho·∫£n ng√¢n h√†ng":
                icon = "üè¶"
                tag = 'bank'
            elif account.type == "Ti·ªÅn m·∫∑t":
                icon = "üíµ"
                tag = 'cash'
            else:
                icon = "üí≥"
                tag = 'ewallet'
            
            self.tree.insert('', 'end', values=(
                account.account_id,
                f"{icon} {account.name}",
                f"{account.balance:,.0f}",
                account.type
            ), tags=(tag,))
            
    def edit_selected_account(self):
        selected_items = self.tree.selection()
        if not selected_items:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn t√†i kho·∫£n c·∫ßn ch·ªânh s·ª≠a!")
            return
            
        item = selected_items[0]
        account_id = int(self.tree.item(item)['values'][0])
        
        # T√¨m t√†i kho·∫£n ƒë∆∞·ª£c ch·ªçn
        accounts = Account.get_all()
        account = next((acc for acc in accounts if acc.account_id == account_id), None)
        
        if account:
            self.show_edit_dialog(account)
            
    def show_edit_dialog(self, account):
        dialog = Dialog(self.parent, "Ch·ªânh S·ª≠a T√†i Kho·∫£n")
        
        # Account Name
        ctk.CTkLabel(dialog.main_frame, text="T√™n T√†i Kho·∫£n:").pack(pady=5)
        name_entry = ctk.CTkEntry(dialog.main_frame)
        name_entry.insert(0, account.name)
        name_entry.pack(pady=5)
        
        # Account Type
        ctk.CTkLabel(dialog.main_frame, text="Lo·∫°i T√†i Kho·∫£n:").pack(pady=5)
        type_var = ctk.StringVar(value=account.type)
        type_menu = ctk.CTkOptionMenu(
            dialog.main_frame,
            values=ACCOUNT_TYPES,
            variable=type_var
        )
        type_menu.pack(pady=5)
        
        # Balance
        ctk.CTkLabel(dialog.main_frame, text="S·ªë D∆∞:").pack(pady=5)
        balance_entry = ctk.CTkEntry(dialog.main_frame)
        balance_entry.insert(0, str(account.balance))
        balance_entry.pack(pady=5)
        
        def save_changes():
            try:
                name = name_entry.get().strip()
                if not name:
                    messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p t√™n t√†i kho·∫£n!")
                    return
                    
                try:
                    balance = float(balance_entry.get())
                    if balance < 0:
                        messagebox.showerror("L·ªói", "S·ªë d∆∞ kh√¥ng th·ªÉ √¢m!")
                        return
                except ValueError:
                    messagebox.showerror("L·ªói", "S·ªë d∆∞ kh√¥ng h·ª£p l·ªá!")
                    return
                
                # Ki·ªÉm tra tr√πng l·∫∑p (tr·ª´ ch√≠nh n√≥)
                account_type = type_var.get()
                existing_accounts = Account.get_all()
                for acc in existing_accounts:
                    if (acc.name.lower() == name.lower() and 
                        acc.type == account_type and 
                        acc.account_id != account.account_id):
                        messagebox.showerror(
                            "L·ªói",
                            f"T√†i kho·∫£n '{name}' v·ªõi lo·∫°i '{account_type}' ƒë√£ t·ªìn t·∫°i!"
                        )
                        return
                
                # C·∫≠p nh·∫≠t t√†i kho·∫£n
                account.name = name
                account.balance = balance
                account.type = account_type
                account.save()
                
                dialog.destroy()
                self.refresh_accounts_list()
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ c·∫≠p nh·∫≠t t√†i kho·∫£n th√†nh c√¥ng!")
                
            except Exception as e:
                messagebox.showerror("L·ªói", f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
                
        save_btn = ctk.CTkButton(dialog.main_frame, text="L∆∞u Thay ƒê·ªïi", command=save_changes)
        save_btn.pack(pady=20)
        
    def delete_selected_account(self):
        selected_items = self.tree.selection()
        if not selected_items:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn t√†i kho·∫£n c·∫ßn x√≥a!")
            return
            
        item = selected_items[0]
        account_id = int(self.tree.item(item)['values'][0])
        account_name = self.tree.item(item)['values'][1]
        
        # X√°c nh·∫≠n x√≥a
        if not messagebox.askyesno("X√°c nh·∫≠n", f"Bn c√≥ ch·∫Øc mu·ªën x√≥a t√†i kho·∫£n '{account_name}'?"):
            return
            
        # X√≥a t√†i kho·∫£n
        try:
            Account.delete(account_id)
            self.refresh_accounts_list()
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ x√≥a t√†i kho·∫£n '{account_name}'")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n: {str(e)}")
        
    def show_add_dialog(self):
        dialog = Dialog(self.parent, "Th√™m T√†i Kho·∫£n M·ªõi")
        
        # Account Name
        ctk.CTkLabel(dialog.main_frame, text="T√™n T√†i Kho·∫£n:").pack(pady=5)
        name_entry = ctk.CTkEntry(dialog.main_frame)
        name_entry.pack(pady=5)
        
        # Account Type
        ctk.CTkLabel(dialog.main_frame, text="Lo·∫°i T√†i Kho·∫£n:").pack(pady=5)
        type_var = ctk.StringVar(value=ACCOUNT_TYPES[0])
        type_menu = ctk.CTkOptionMenu(
            dialog.main_frame,
            values=ACCOUNT_TYPES,
            variable=type_var
        )
        type_menu.pack(pady=5)
        
        # Initial Balance
        ctk.CTkLabel(dialog.main_frame, text="S·ªë D∆∞ Ban ƒê·∫ßu:").pack(pady=5)
        balance_entry = ctk.CTkEntry(dialog.main_frame)
        balance_entry.pack(pady=5)
        
        def save_account():
            try:
                # Ki·ªÉm tra t√™n t√†i kho·∫£n tr·ªëng
                name = name_entry.get().strip()
                if not name:
                    messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p t√™n t√†i kho·∫£n!")
                    return
                
                # Ki·ªÉm tra s·ªë d∆∞
                try:
                    balance = float(balance_entry.get())
                    if balance < 0:
                        messagebox.showerror("L·ªói", "S·ªë d∆∞ kh√¥ng th·ªÉ √¢m!")
                        return
                except ValueError:
                    messagebox.showerror("L·ªói", "S·ªë d∆∞ kh√¥ng h·ª£p l·ªá!")
                    return
                
                # Ki·ªÉm tra t√†i kho·∫£n tr√πng l·∫∑p
                account_type = type_var.get()
                existing_accounts = Account.get_all()
                for account in existing_accounts:
                    if account.name.lower() == name.lower() and account.type == account_type:
                        messagebox.showerror(
                            "L·ªói",
                            f"T√†i kho·∫£n '{name}' v·ªõi lo·∫°i '{account_type}' ƒë√£ t·ªìn t·∫°i!"
                        )
                        return
                
                # T·∫°o t√†i kho·∫£n m·ªõi
                new_id = len(existing_accounts) + 1
                account = Account(
                    account_id=new_id,
                    name=name,
                    balance=balance,
                    type=account_type
                )
                account.save()
                
                dialog.destroy()
                self.refresh_accounts_list()
                
            except Exception as e:
                messagebox.showerror("L·ªói", f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
                
        save_btn = ctk.CTkButton(dialog.main_frame, text="L∆∞u", command=save_account)
        save_btn.pack(pady=20) 
