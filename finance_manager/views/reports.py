import customtkinter as ctk
from tkinter import ttk, filedialog, messagebox
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import pandas as pd
from datetime import datetime
from models.transaction import Transaction
from models.account import Account
from models.loan import Loan
from models.saving import Saving
from config.colors import *
import numpy as np

class ReportsView:
    def __init__(self, parent):
        self.parent = parent
        
    def show(self):
        self.create_title()
        self.create_tabs()
        
    def create_title(self):
        title = ctk.CTkLabel(
            self.parent,
            text="B√°o C√°o T√†i Ch√≠nh",
            font=("Helvetica", 24, "bold"),
            text_color=TEXT_CONTRAST['light']
        )
        title.pack(pady=20)
        
    def create_tabs(self):
        # Control Frame cho l·ª±a ch·ªçn t√†i kho·∫£n v√† xu·∫•t b√°o c√°o
        control_frame = ctk.CTkFrame(
            self.parent,
            fg_color=BACKGROUND['dark']
        )
        control_frame.pack(fill="x", padx=20, pady=10)
        
        # Left side - Account Selection
        account_frame = ctk.CTkFrame(
            control_frame, 
            fg_color="transparent"
        )
        account_frame.pack(side="left", fill="x", expand=True)
        
        account_label = ctk.CTkLabel(
            account_frame, 
            text="üè¶ Ch·ªçn T√†i Kho·∫£n:",
            font=("Helvetica", 14, "bold"),
            text_color=TEXT_CONTRAST['light']
        )
        account_label.pack(side="left", padx=10)
        
        accounts = Account.get_all()
        account_names = ["T·∫•t c·∫£ t√†i kho·∫£n"] + [acc.name for acc in accounts]
        self.account_var = ctk.StringVar(value=account_names[0])
        self.account_menu = ctk.CTkOptionMenu(
            account_frame,
            values=account_names,
            variable=self.account_var,
            width=250,
            height=35,
            font=("Helvetica", 12),
            command=self.on_account_change,
            fg_color=PRIMARY['main'],
            button_color=PRIMARY['hover'],
            button_hover_color=PRIMARY['light'],
            text_color=TEXT_CONTRAST['light']
        )
        self.account_menu.pack(side="left", padx=10)
        
        # Right side - Export Button
        export_btn = ctk.CTkButton(
            control_frame,
            text="üìä Xu·∫•t B√°o C√°o Excel",
            command=self.export_to_excel,
            width=180,
            height=35,
            font=("Helvetica", 12, "bold"),
            fg_color=SUCCESS['main'],
            hover_color=SUCCESS['hover'],
            text_color=TEXT_CONTRAST['light']
        )
        export_btn.pack(side="right", padx=20)
        
        # Tabview with custom style
        self.tabview = ctk.CTkTabview(
            self.parent,
            fg_color=BACKGROUND['dark']
        )
        self.tabview.pack(fill="both", expand=True, padx=20, pady=10)
        
        # Add tabs with icons
        self.tab_income_expense = self.tabview.add("üí∞ Thu Chi")
        self.tab_cashflow = self.tabview.add("üìà D√≤ng Ti·ªÅn")
        self.tab_category = self.tabview.add("üìä Chi Ti√™u Theo Danh M·ª•c")
        self.tab_assets = self.tabview.add("üíé T√†i S·∫£n")
        
        # Style the tabs
        for tab in [self.tab_income_expense, self.tab_cashflow, 
                   self.tab_category, self.tab_assets]:
            tab.configure(fg_color=BACKGROUND['dark'])
        
        # Create content for each tab
        self.create_income_expense_report(self.tab_income_expense)
        self.create_cashflow_report(self.tab_cashflow)
        self.create_category_report(self.tab_category)
        self.create_assets_report(self.tab_assets)
        
    def on_account_change(self, account_name):
        """X·ª≠ l√Ω khi thay ƒë·ªïi t√†i kho·∫£n"""
        # X√≥a n·ªôi dung c≈© c·ªßa c√°c tab
        for widget in self.tab_income_expense.winfo_children():
            widget.destroy()
        for widget in self.tab_cashflow.winfo_children():
            widget.destroy()
        for widget in self.tab_category.winfo_children():
            widget.destroy()
        for widget in self.tab_assets.winfo_children():
            widget.destroy()
            
        # T·∫°o l·∫°i n·ªôi dung m·ªõi v·ªõi t√†i kho·∫£n ƒë√£ ch·ªçn
        self.create_income_expense_report(self.tab_income_expense)
        self.create_cashflow_report(self.tab_cashflow)
        self.create_category_report(self.tab_category)
        self.create_assets_report(self.tab_assets)
        
    def get_filtered_transactions(self):
        """L·∫•y danh s√°ch giao d·ªãch theo t√†i kho·∫£n ƒë∆∞·ª£c ch·ªçn"""
        transactions = Transaction.get_all()
        
        if self.account_var.get() != "T·∫•t c·∫£ t√†i kho·∫£n":
            try:
                account = next(acc for acc in Account.get_all() 
                             if acc.name == self.account_var.get())
                
                # L·ªçc c√°c giao d·ªãch li√™n quan ƒë·∫øn t√†i kho·∫£n n√†y
                filtered_transactions = []
                for t in transactions:
                    new_transaction = None
                    
                    # Giao d·ªãch tr·ª±c ti·∫øp c·ªßa t√†i kho·∫£n
                    if t.account_id == account.account_id:
                        if t.type == "Chuy·ªÉn ti·ªÅn":
                            # Ki·ªÉm tra xem l√† chuy·ªÉn ƒëi hay nh·∫≠n v√†o
                            if f"t·ª´ {account.name}" in t.category:
                                # Chuy·ªÉn ti·ªÅn ƒëi -> s·ªë ti·ªÅn √¢m
                                new_transaction = Transaction(
                                    transaction_id=t.transaction_id,
                                    date=t.date,
                                    type="Chuy·ªÉn ti·ªÅn ƒëi",
                                    amount=-abs(t.amount),  # ƒê·∫£m b·∫£o s·ªë √¢m
                                    category=t.category,
                                    account_id=t.account_id,
                                    note=t.note
                                )
                            elif f"ƒë·∫øn {account.name}" in t.category:
                                # Nh·∫≠n ti·ªÅn -> s·ªë ti·ªÅn d∆∞∆°ng
                                new_transaction = Transaction(
                                    transaction_id=t.transaction_id,
                                    date=t.date,
                                    type="Chuy·ªÉn ti·ªÅn ƒë·∫øn",
                                    amount=abs(t.amount),  # ƒê·∫£m b·∫£o s·ªë d∆∞∆°ng
                                    category=t.category,
                                    account_id=t.account_id,
                                    note=t.note
                                )
                        else:
                            # Thu nh·∫≠p -> d∆∞∆°ng, chi ti√™u v√† ti·∫øt ki·ªám -> √¢m
                            amount = abs(t.amount) if t.type == "Thu nh·∫≠p" else -abs(t.amount)
                            new_transaction = Transaction(
                                transaction_id=t.transaction_id,
                                date=t.date,
                                type=t.type,
                                amount=amount,
                                category=t.category,
                                account_id=t.account_id,
                                note=t.note
                            )
                    
                    # Giao d·ªãch chuy·ªÉn kho·∫£n t·ª´ t√†i kho·∫£n kh√°c ƒë·∫øn t√†i kho·∫£n n√†y
                    elif t.type == "ChuyÔøΩÔøΩÔøΩn ti·ªÅn" and f"ƒë·∫øn {account.name}" in t.category:
                        new_transaction = Transaction(
                            transaction_id=t.transaction_id,
                            date=t.date,
                            type="Chuy·ªÉn ti·ªÅn ƒë·∫øn",
                            amount=abs(t.amount),  # ƒê·∫£m b·∫£o s·ªë d∆∞∆°ng
                            category=t.category,
                            account_id=account.account_id,
                            note=t.note
                        )
                    
                    if new_transaction:
                        filtered_transactions.append(new_transaction)
                
                transactions = filtered_transactions
                
            except StopIteration:
                return []
            
        # S·∫Øp x·∫øp theo ng√†y
        transactions.sort(key=lambda x: datetime.strptime(x.date, "%Y-%m-%d"))
        return transactions
        
    def create_chart_frame(self, parent, title):
        """Helper function to create consistent chart frames"""
        frame = ctk.CTkFrame(
            parent,
            fg_color=BACKGROUND['dark']
        )
        frame.pack(fill="x", padx=10, pady=5)
        
        # Title with background
        title_frame = ctk.CTkFrame(
            frame,
            fg_color=PRIMARY['main']
        )
        title_frame.pack(fill="x", padx=5, pady=5)
        
        ctk.CTkLabel(
            title_frame,
            text=title,
            font=("Helvetica", 16, "bold"),
            text_color=TEXT_CONTRAST['light']
        ).pack(pady=5)
        
        return frame

    def create_summary_frame(self, parent, title, content):
        """Helper function to create consistent summary frames"""
        frame = ctk.CTkFrame(
            parent,
            fg_color=BACKGROUND['dark']
        )
        frame.pack(fill="x", padx=10, pady=5)
        
        ctk.CTkLabel(
            frame,
            text=title,
            font=("Helvetica", 14, "bold"),
            text_color=TEXT_CONTRAST['light']
        ).pack(pady=5)
        
        ctk.CTkLabel(
            frame,
            text=content,
            font=("Helvetica", 12),
            text_color=TEXT_CONTRAST['light'],
            justify="left"
        ).pack(pady=5)
        
        return frame

    def create_income_expense_report(self, parent):
        """T·∫°o b√°o c√°o thu chi"""
        transactions = self.get_filtered_transactions()
        if not transactions:
            self.show_no_data_message(parent, "thu chi")
            return
            
        # T√≠nh to√°n thu chi theo th√°ng
        df = pd.DataFrame([{
            'date': pd.to_datetime(t.date),
            'type': t.type,
            'amount': abs(t.amount)  # S·ª≠ d·ª•ng gi√° tr·ªã tuy·ªát ƒë·ªëi cho bi·ªÉu ƒë·ªì
        } for t in transactions])
        
        # Th√™m c·ªôt th√°ng v√† nƒÉm
        df['month'] = df['date'].dt.strftime('%Y-%m')
        
        # T√≠nh t·ªïng theo lo·∫°i giao d·ªãch v√† th√°ng
        monthly_stats = pd.pivot_table(
            df,
            index='month',
            columns='type',
            values='amount',
            aggfunc='sum',
            fill_value=0
        ).reset_index()
        
        # ƒê·∫£m b·∫£o c√≥ ƒë·ªß c√°c c·ªôt c·∫ßn thi·∫øt
        required_columns = ['Thu nh·∫≠p', 'Chi ti√™u', 'G·ª≠i ti·∫øt ki·ªám', 'Chuy·ªÉn ti·ªÅn']
        for col in required_columns:
            if col not in monthly_stats.columns:
                monthly_stats[col] = 0
            
        # T·∫°o bi·ªÉu ƒë·ªì
        self.create_monthly_chart(parent, monthly_stats)
        
        # T·∫°o b·∫£ng th·ªëng k√™ chi ti·∫øt
        self.create_transaction_details(parent, transactions)

    def show_no_data_message(self, parent, report_type):
        """Hi·ªÉn th·ªã th√¥ng b√°o khi kh√¥ng c√≥ d·ªØ li·ªáu"""
        message_frame = ctk.CTkFrame(parent, fg_color=BACKGROUND['dark'])
        message_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        ctk.CTkLabel(
            message_frame,
            text=f"‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu {report_type}",
            font=("Helvetica", 16, "bold"),
            text_color=TEXT_CONTRAST['danger']
        ).pack(pady=5)
        
        # Th√™m h∆∞·ªõng d·∫´n c·ª• th·ªÉ
        if report_type == "thu chi":
            guide_text = "Vui l√≤ng th√™m giao d·ªãch thu/chi ƒë·ªÉ xem b√°o c√°o."
        elif report_type == "d√≤ng ti·ªÅn":
            guide_text = "Vui l√≤ng th√™m c√°c giao d·ªãch ƒë·ªÉ xem d√≤ng ti·ªÅn."
        elif report_type == "danh m·ª•c":
            guide_text = "Vui l√≤ng th√™m giao d·ªãch c√≥ danh m·ª•c ƒë·ªÉ xem ph√¢n t√≠ch."
        else:
            guide_text = "Vui l√≤ng th√™m d·ªØ li·ªáu ƒë·ªÉ xem b√°o c√°o."
        
        ctk.CTkLabel(
            message_frame,
            text=f"T√†i kho·∫£n {self.account_var.get()} ch∆∞a c√≥ d·ªØ li·ªáu.\n{guide_text}",
            font=("Helvetica", 14),
            text_color=TEXT_CONTRAST['muted']
        ).pack(pady=5)

    def create_transaction_details(self, parent, transactions):
        """T·∫°o b·∫£ng chi ti·∫øt giao d·ªãch"""
        details_frame = ctk.CTkFrame(parent, fg_color=BACKGROUND['dark'])
        details_frame.pack(fill="x", padx=10, pady=5)
        
        # T·∫°o Treeview cho chi ti·∫øt giao d·ªãch
        columns = ('Ng√†y', 'Lo·∫°i', 'S·ªë Ti·ªÅn', 'Danh M·ª•c', 'Ghi Ch√∫')
        tree = ttk.Treeview(details_frame, columns=columns, show='headings', height=5)
        
        # C·∫•u h√¨nh c·ªôt
        for col in columns:
            tree.heading(col, text=col)
            tree.column(col, width=150)
        
        # Style cho Treeview
        style = ttk.Style()
        style.configure(
            "Treeview",
            background=BACKGROUND['dark'],
            foreground=TEXT_CONTRAST['light'],
            fieldbackground=BACKGROUND['dark']
        )
        
        # Tags cho c√°c lo·∫°i giao d·ªãch
        tree.tag_configure('income', foreground=TRANSACTION_CONTRAST['income'])
        tree.tag_configure('expense', foreground=TRANSACTION_CONTRAST['expense'])
        tree.tag_configure('transfer_in', foreground=TRANSACTION_CONTRAST['transfer'])
        tree.tag_configure('transfer_out', foreground=DANGER['main'])
        tree.tag_configure('saving', foreground=TRANSACTION_CONTRAST['saving'])
        
        # Th√™m d·ªØ li·ªáu v√†o b·∫£ng
        for t in transactions:
            # X√°c ƒë·ªãnh tag d·ª±a v√†o lo·∫°i giao d·ªãch
            if t.type == "Thu nh·∫≠p":
                tag = 'income'
            elif t.type == "Chi ti√™u":
                tag = 'expense'
            elif t.type == "Chuy·ªÉn ti·ªÅn ƒë·∫øn":
                tag = 'transfer_in'
            elif t.type == "Chuy·ªÉn ti·ªÅn ƒëi":
                tag = 'transfer_out'
            else:  # Ti·∫øt ki·ªám
                tag = 'saving'
            
            tree.insert('', 'end', values=(
                t.date,
                t.type,
                f"{abs(t.amount):,.0f}",
                t.category,
                t.note
            ), tags=(tag,))
        
        tree.pack(fill="x", padx=5, pady=5)
        
    def create_cashflow_report(self, parent):
        """T·∫°o b√°o c√°o d√≤ng ti·ªÅn"""
        transactions = self.get_filtered_transactions()
        if not transactions:
            # Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
            message_frame = ctk.CTkFrame(parent, fg_color=BACKGROUND['dark'])
            message_frame.pack(fill="both", expand=True, padx=20, pady=20)
            
            ctk.CTkLabel(
                message_frame,
                text="‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu d√≤ng ti·ªÅn",
                font=("Helvetica", 16, "bold"),
                text_color=TEXT_CONTRAST['danger']
            ).pack(pady=5)
            
            ctk.CTkLabel(
                message_frame,
                text=f"T√†i kho·∫£n {self.account_var.get()} ch∆∞a c√≥ giao d·ªãch n√†o.\nKh√¥ng th·ªÉ t·∫°o b√°o c√°o d√≤ng ti·ªÅn.",
                font=("Helvetica", 14),
                text_color=TEXT_CONTRAST['muted']
            ).pack(pady=5)
            return
            
        # Calculate cumulative cash flow
        df = pd.DataFrame([{
            'date': t.date,
            'amount': (t.amount if t.type == 'Thu nh·∫≠p' else 
                      -t.amount if t.type == 'Chi ti√™u' else 
                      -t.amount if t.type == 'G·ª≠i ti·∫øt ki·ªám' else 
                      t.amount)  # ƒê√£ x·ª≠ l√Ω d·∫•u trong get_filtered_transactions
        } for t in transactions])
        
        df['date'] = pd.to_datetime(df['date'])
        df = df.sort_values('date')
        df['cumulative'] = df['amount'].cumsum()
        
        # ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc bi·ªÉu ƒë·ªì
        fig, ax = plt.subplots(figsize=(10, 3.5), facecolor=BACKGROUND['dark'])
        
        # T·∫°o gradient fill d∆∞·ªõi ƒë∆∞·ªùng
        z = np.polyfit(range(len(df['cumulative'])), df['cumulative'], 1)
        p = np.poly1d(z)
        ax.fill_between(df['date'], df['cumulative'], alpha=0.2, 
                       color=PRIMARY['light'])
        
        # V·∫Ω ƒë∆∞·ªùng d√≤ng ti·ªÅn v·ªõi style m·ªõi
        line = ax.plot(df['date'], df['cumulative'], 
                      color=PRIMARY['main'],
                      marker='o', markersize=3,
                      linewidth=1.5,
                      markerfacecolor=PRIMARY['light'],
                      markeredgecolor=PRIMARY['main'])
        
        # Th√™m ƒëi·ªÉm b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
        ax.plot(df['date'].iloc[0], df['cumulative'].iloc[0], 
               'o', color=SUCCESS['main'], markersize=5,
               label='B·∫Øt ƒë·∫ßu')
        ax.plot(df['date'].iloc[-1], df['cumulative'].iloc[-1], 
               'o', color=WARNING['main'], markersize=5,
               label='Hi·ªán t·∫°i')
        
        # Style cho bi·ªÉu ƒë·ªì
        ax.set_title('D√≤ng Ti·ªÅn T√≠ch L≈©y', 
                    fontsize=9, color=TEXT_CONTRAST['light'], pad=10)
        ax.set_facecolor(BACKGROUND['dark'])
        ax.tick_params(axis='both', colors=TEXT_CONTRAST['light'], labelsize=7)
        
        # Th√™m l∆∞·ªõi v·ªõi style m·ªõi
        ax.grid(True, linestyle='--', alpha=0.1, color=TEXT_CONTRAST['light'])
        
        # Legend v·ªõi font size nh·ªè
        ax.legend(fontsize=7, loc='upper left',
                 facecolor=BACKGROUND['dark'],
                 labelcolor=TEXT_CONTRAST['light'])
        
        plt.tight_layout(pad=2.0)
        
        # Th√™m bi·ªÉu ƒë·ªì v√†o frame
        canvas = FigureCanvasTkAgg(fig, master=parent)
        canvas.draw()
        canvas_widget = canvas.get_tk_widget()
        canvas_widget.pack(fill="both", expand=True, padx=10, pady=(5, 15))
        
        # Add summary text
        summary_text = (
            f"üè¶ S·ªë d∆∞ ban ƒë·∫ßu: {df['cumulative'].iloc[0]:,.0f} VND\n"
            f"üí∞ S·ªë d∆∞ cu·ªëi k·ª≥: {df['cumulative'].iloc[-1]:,.0f} VND\n"
            f"üìä Thay ƒë·ªïi: {(df['cumulative'].iloc[-1] - df['cumulative'].iloc[0]):,.0f} VND"
        )
        self.create_summary_frame(parent, "üìë T·ªïng K·∫øt", summary_text)
        
    def create_category_report(self, parent):
        """T·∫°o b√°o c√°o theo danh m·ª•c"""
        transactions = self.get_filtered_transactions()
        if not transactions:
            self.show_no_data_message(parent, "danh m·ª•c")
            return
            
        # Calculate totals by category
        expense_by_category = {}
        income_by_category = {}
        savings_by_category = {}
        
        for t in transactions:
            amount = abs(t.amount)  # S·ª≠ d·ª•ng gi√° tr·ªã tuy·ªát ƒë·ªëi
            if t.type == 'Chi ti√™u':
                expense_by_category[t.category] = expense_by_category.get(t.category, 0) + amount
            elif t.type == 'Thu nh·∫≠p':
                income_by_category[t.category] = income_by_category.get(t.category, 0) + amount
            elif t.type == 'G·ª≠i ti·∫øt ki·ªám':
                savings_by_category[t.category] = savings_by_category.get(t.category, 0) + amount
                
        # T·∫°o bi·ªÉu ƒë·ªì
        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(15, 5), facecolor=BACKGROUND['dark'])
        
        # Style chung cho c√°c bi·ªÉu ƒë·ªì
        for ax in [ax1, ax2, ax3]:
            ax.set_facecolor(BACKGROUND['dark'])
            for spine in ax.spines.values():
                spine.set_color(TEXT_CONTRAST['muted'])
        
        # Chi ti√™u theo danh m·ª•c
        if expense_by_category:
            categories = list(expense_by_category.keys())
            amounts = list(expense_by_category.values())
            if sum(amounts) > 0:  # Ch·ªâ v·∫Ω khi c√≥ gi√° tr·ªã d∆∞∆°ng
                colors = [TRANSACTION_CONTRAST['expense']] * len(categories)
                ax1.pie(amounts, labels=categories, colors=colors, autopct='%1.1f%%',
                        textprops={'color': TEXT_CONTRAST['light']})
            ax1.set_title('Chi Ti√™u Theo Danh M·ª•c', 
                         fontsize=10, color=TEXT_CONTRAST['light'])
            
        # Thu nh·∫≠p theo danh m·ª•c
        if income_by_category:
            categories = list(income_by_category.keys())
            amounts = list(income_by_category.values())
            if sum(amounts) > 0:  # Ch·ªâ v·∫Ω khi c√≥ gi√° tr·ªã d∆∞∆°ng
                colors = [TRANSACTION_CONTRAST['income']] * len(categories)
                ax2.pie(amounts, labels=categories, colors=colors, autopct='%1.1f%%',
                        textprops={'color': TEXT_CONTRAST['light']})
            ax2.set_title('Thu Nh·∫≠p Theo Danh M·ª•c', 
                         fontsize=10, color=TEXT_CONTRAST['light'])
            
        # Ti·∫øt ki·ªám theo m·ª•c ti√™u
        if savings_by_category:
            categories = list(savings_by_category.keys())
            amounts = list(savings_by_category.values())
            if sum(amounts) > 0:  # Ch·ªâ v·∫Ω khi c√≥ gi√° tr·ªã d∆∞∆°ng
                colors = [TRANSACTION_CONTRAST['saving']] * len(categories)
                ax3.pie(amounts, labels=categories, colors=colors, autopct='%1.1f%%',
                        textprops={'color': TEXT_CONTRAST['light']})
            ax3.set_title('Ti·∫øt Ki·ªám Theo M·ª•c Ti√™u', 
                         fontsize=10, color=TEXT_CONTRAST['light'])
        
        plt.tight_layout()
        
        # Add to frame
        canvas = FigureCanvasTkAgg(fig, master=parent)
        canvas.draw()
        canvas.get_tk_widget().pack(fill="both", expand=True)
        
        # Add summary text
        total_expense = sum(expense_by_category.values())
        total_income = sum(income_by_category.values())
        total_savings = sum(savings_by_category.values())
        
        summary_text = (
            f"üí∏ T·ªïng chi ti√™u: {total_expense:,.0f} VND\n"
            f"üíµ T·ªïng thu nh·∫≠p: {total_income:,.0f} VND\n"
            f"üí∞ T·ªïng ti·∫øt ki·ªám: {total_savings:,.0f} VND"
        )
        self.create_summary_frame(parent, "üìë T·ªïng K·∫øt", summary_text)
        
    def create_assets_report(self, parent):
        """T·∫°o b√°o c√°o t√†i s·∫£n"""
        # Get data for selected account
        if self.account_var.get() == "T·∫•t c·∫£ t√†i kho·∫£n":
            accounts = Account.get_all()
        else:
            try:
                accounts = [next(acc for acc in Account.get_all() 
                               if acc.name == self.account_var.get())]
            except StopIteration:
                # Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng t√¨m th·∫•y t√†i kho·∫£n
                message_frame = ctk.CTkFrame(parent, fg_color=BACKGROUND['dark'])
                message_frame.pack(fill="both", expand=True, padx=20, pady=20)
                
                ctk.CTkLabel(
                    message_frame,
                    text="‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n",
                    font=("Helvetica", 16, "bold"),
                    text_color=TEXT_CONTRAST['danger']
                ).pack(pady=5)
                
                ctk.CTkLabel(
                    message_frame,
                    text=f"Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n {self.account_var.get()}.\nVui l√≤ng ki·ªÉm tra l·∫°i.",
                    font=("Helvetica", 14),
                    text_color=TEXT_CONTRAST['muted']
                ).pack(pady=5)
                return
            
        loans = Loan.get_all()
        savings = Saving.get_all()
        
        # Filter loans and savings for selected account
        if self.account_var.get() != "T·∫•t c·∫£ t√†i kho·∫£n":
            account = accounts[0]
            # L·ªçc kho·∫£n vay d·ª±a tr√™n ng∆∞·ªùi vay/cho vay
            loans = [loan for loan in loans 
                    if (loan.type == "Vay ti·ªÅn" and loan.borrower_name == account.name) or
                       (loan.type == "Cho vay" and loan.lender_name == account.name)]
            savings = [saving for saving in savings 
                      if saving.account_id == account.account_id]
        
        # Ki·ªÉm tra n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
        if not accounts and not loans and not savings:
            message_frame = ctk.CTkFrame(parent, fg_color=BACKGROUND['dark'])
            message_frame.pack(fill="both", expand=True, padx=20, pady=20)
            
            ctk.CTkLabel(
                message_frame,
                text="‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu t√†i s·∫£n",
                font=("Helvetica", 16, "bold"),
                text_color=TEXT_CONTRAST['danger']
            ).pack(pady=5)
            
            ctk.CTkLabel(
                message_frame,
                text=f"T√†i kho·∫£n {self.account_var.get()} ch∆∞a c√≥ d·ªØ li·ªáu t√†i s·∫£n n√†o.\nVui l√≤ng th√™m t√†i kho·∫£n, kho·∫£n vay ho·∫∑c ti·∫øt ki·ªám.",
                font=("Helvetica", 14),
                text_color=TEXT_CONTRAST['muted']
            ).pack(pady=5)
            return
        
        # Calculate totals
        total_assets = sum(acc.balance for acc in accounts)
        total_loans = sum(loan.remaining_principal for loan in loans if loan.type == 'Cho vay')
        total_debts = sum(loan.remaining_principal for loan in loans if loan.type == 'Vay ti·ªÅn')
        total_savings = sum(saving.current_amount for saving in savings)
        
        net_worth = total_assets + total_loans - total_debts + total_savings
        
        # T·∫°o bi·ªÉu ƒë·ªì ch·ªâ khi c√≥ d·ªØ li·ªáu
        if total_assets > 0 or total_loans > 0 or total_debts > 0 or total_savings > 0:
            # T·∫°o bi·ªÉu ƒë·ªì
            fig, ax = plt.subplots(figsize=(12, 5), facecolor=BACKGROUND['dark'])
            
            # Chu·∫©n b·ªã d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
            labels = ['T√†i kho·∫£n', 'Cho vay', 'N·ª£', 'Ti·∫øt ki·ªám']
            sizes = [total_assets, total_loans, total_debts, total_savings]
            colors = [PRIMARY['main'], SUCCESS['main'], DANGER['main'], WARNING['main']]
            
            # V·∫Ω bi·ªÉu ƒë·ªì tr√≤n
            wedges, texts, autotexts = ax.pie(
                sizes,
                labels=labels,
                colors=colors,
                autopct='%1.1f%%',
                startangle=90,
                textprops={'color': TEXT_CONTRAST['light']}
            )
            
            # Style cho bi·ªÉu ƒë·ªì
            ax.set_facecolor(BACKGROUND['dark'])
            ax.set_title(
                f'Ph√¢n B·ªï T√†i S·∫£n ({self.account_var.get()})',
                fontsize=12,
                color=TEXT_CONTRAST['light'],
                pad=20
            )
            
            # Th√™m ch√∫ th√≠ch
            ax.legend(
                wedges,
                labels,
                title="Th√†nh ph·∫ßn",
                loc="center left",
                bbox_to_anchor=(1, 0, 0.5, 1),
                facecolor=BACKGROUND['dark'],
                labelcolor=TEXT_CONTRAST['light']
            )
            
            plt.tight_layout()
            
            # Add to frame
            canvas = FigureCanvasTkAgg(fig, master=parent)
            canvas.draw()
            canvas.get_tk_widget().pack(fill="both", expand=True)
        else:
            ctk.CTkLabel(
                parent,
                text="Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t·∫°o bi·ªÉu ƒë·ªì",
                font=("Helvetica", 14),
                text_color=TEXT_CONTRAST['muted']
            ).pack(pady=20)
        
        # Lu√¥n hi·ªÉn th·ªã summary text
        summary_text = (
            f"üí∞ S·ªë d∆∞ t√†i kho·∫£n: {total_assets:,.0f} VND\n"
            f"üí∏ Cho vay: {total_loans:,.0f} VND\n"
            f"üí≥ N·ª£: {total_debts:,.0f} VND\n"
            f"üè¶ Ti·∫øt ki·ªám: {total_savings:,.0f} VND\n"
            f"üìà Gi√° tr·ªã r√≤ng: {net_worth:,.0f} VND"
        )
        self.create_summary_frame(parent, "üìë T·ªïng K·∫øt", summary_text)
        
    def create_buttons(self):
        button_frame = ctk.CTkFrame(self.parent)
        button_frame.pack(pady=10)
        
        export_btn = ctk.CTkButton(
            button_frame,
            text="Xu·∫•t Excel",
            command=self.export_to_excel,
            width=120
        )
        export_btn.pack(side="right", padx=10)
        
    def export_to_excel(self):
        try:
            # Ch·ªçn n∆°i l∆∞u file
            file_path = filedialog.asksaveasfilename(
                defaultextension=".xlsx",
                filetypes=[("Excel files", "*.xlsx")],
                title="L∆∞u b√°o c√°o Excel"
            )
            
            if not file_path:
                return

            # T·∫°o workbook Excel
            with pd.ExcelWriter(file_path, engine='xlsxwriter') as writer:
                workbook = writer.book
                
                # ƒê·ªãnh d·∫°ng chung
                header_format = workbook.add_format({
                    'bold': True,
                    'align': 'center',
                    'bg_color': '#D3D3D3'
                })
                
                money_format = workbook.add_format({
                    'num_format': '#,##0',
                    'align': 'right'
                })

                # 1. Sheet Giao D·ªãch
                transactions = self.get_filtered_transactions()
                account_map = {acc.account_id: acc.name for acc in Account.get_all()}
                
                trans_data = []
                for trans in transactions:
                    trans_data.append({
                        'Ng√†y': trans.date,
                        'Lo·∫°i': trans.type,
                        'S·ªë Ti·ªÅn': trans.amount,
                        'Danh M·ª•c': trans.category,
                        'T√†i Kho·∫£n': account_map.get(trans.account_id, ""),
                        'Ghi Ch√∫': trans.note
                    })
                
                df_trans = pd.DataFrame(trans_data)
                df_trans.to_excel(writer, sheet_name='Giao D·ªãch', index=False)
                
                # ƒê·ªãnh d·∫°ng Sheet Giao D·ªãch
                worksheet = writer.sheets['Giao D·ªãch']
                for col_num, value in enumerate(df_trans.columns.values):
                    worksheet.write(0, col_num, value, header_format)
                worksheet.set_column('C:C', 15, money_format)
                worksheet.set_column('A:A', 15)
                worksheet.set_column('B:B', 15)
                worksheet.set_column('D:D', 20)
                worksheet.set_column('E:E', 20)
                worksheet.set_column('F:F', 30)

                # 2. Sheet Th·ªëng K√™ Thu Chi
                total_income = sum(t.amount for t in transactions if t.type == 'Thu nh·∫≠p')
                total_expense = sum(t.amount for t in transactions if t.type == 'Chi ti√™u')
                total_savings = sum(t.amount for t in transactions if t.type == 'G·ª≠i ti·∫øt ki·ªám')
                
                summary_data = {
                    'Ch·ªâ s·ªë': ['T·ªïng thu nh·∫≠p', 'T·ªïng chi ti√™u', 'T·ªïng ti·∫øt ki·ªám', 'Ch√™nh l·ªách'],
                    'S·ªë ti·ªÅn (VND)': [
                        total_income,
                        total_expense,
                        total_savings,
                        total_income - total_expense - total_savings
                    ]
                }
                df_summary = pd.DataFrame(summary_data)
                df_summary.to_excel(writer, sheet_name='Th·ªëng K√™ Thu Chi', index=False)
                
                # ƒê·ªãnh d·∫°ng Sheet Th·ªëng K√™ Thu Chi
                worksheet = writer.sheets['Th·ªëng K√™ Thu Chi']
                for col_num, value in enumerate(df_summary.columns.values):
                    worksheet.write(0, col_num, value, header_format)
                worksheet.set_column('B:B', 20, money_format)
                worksheet.set_column('A:A', 20)

                # 3. Sheet Chi Ti√™u Theo Danh M·ª•c
                expense_by_category = {}
                income_by_category = {}
                savings_by_category = {}
                
                for t in transactions:
                    if t.type == 'Chi ti√™u':
                        expense_by_category[t.category] = expense_by_category.get(t.category, 0) + t.amount
                    elif t.type == 'Thu nh·∫≠p':
                        income_by_category[t.category] = income_by_category.get(t.category, 0) + t.amount
                    elif t.type == 'G·ª≠i ti·∫øt ki·ªám':
                        savings_by_category[t.category] = savings_by_category.get(t.category, 0) + t.amount
                
                category_data = []
                # Chi ti√™u theo danh m·ª•c
                for category, amount in expense_by_category.items():
                    category_data.append({
                        'Lo·∫°i': 'Chi ti√™u',
                        'Danh M·ª•c': category,
                        'S·ªë Ti·ªÅn': amount,
                        'T·ª∑ L·ªá': amount/total_expense*100 if total_expense > 0 else 0
                    })
                # Thu nh·∫≠p theo danh m·ª•c
                for category, amount in income_by_category.items():
                    category_data.append({
                        'Lo·∫°i': 'Thu nh·∫≠p',
                        'Danh M·ª•c': category,
                        'S·ªë Ti·ªÅn': amount,
                        'T·ª∑ L·ªá': amount/total_income*100 if total_income > 0 else 0
                    })
                # Ti·∫øt ki·ªám theo m·ª•c ti√™u
                for category, amount in savings_by_category.items():
                    category_data.append({
                        'Lo·∫°i': 'Ti·∫øt ki·ªám',
                        'Danh M·ª•c': category,
                        'S·ªë Ti·ªÅn': amount,
                        'T·ª∑ L·ªá': amount/total_savings*100 if total_savings > 0 else 0
                    })
                
                df_category = pd.DataFrame(category_data)
                df_category.to_excel(writer, sheet_name='Chi Ti√™u Theo Danh M·ª•c', index=False)
                
                # ƒê·ªãnh d·∫°ng Sheet Chi Ti√™u Theo Danh M·ª•c
                worksheet = writer.sheets['Chi Ti√™u Theo Danh M·ª•c']
                for col_num, value in enumerate(df_category.columns.values):
                    worksheet.write(0, col_num, value, header_format)
                worksheet.set_column('C:C', 15, money_format)
                worksheet.set_column('D:D', 10)
                worksheet.set_column('A:B', 20)

                # 4. Sheet T√†i S·∫£n
                if self.account_var.get() == "T·∫•t c·∫£ t√†i kho·∫£n":
                    accounts = Account.get_all()
                else:
                    accounts = [next(acc for acc in Account.get_all() 
                               if acc.name == self.account_var.get())]
                
                loans = Loan.get_all()
                savings = Saving.get_all()
                
                # Filter loans and savings for selected account
                if self.account_var.get() != "T·∫•t c·∫£ t√†i kho·∫£n":
                    account = accounts[0]
                    loans = [loan for loan in loans 
                            if loan.from_account_id == account.account_id 
                            or loan.to_account_id == account.account_id]
                    savings = [saving for saving in savings 
                             if saving.account_id == account.account_id]
                
                # T√†i kho·∫£n
                account_data = [{
                    'Lo·∫°i': 'T√†i kho·∫£n',
                    'T√™n': acc.name,
                    'S·ªë D∆∞': acc.balance
                } for acc in accounts]
                
                # Kho·∫£n vay
                loan_data = [{
                    'Lo·∫°i': loan.type,
                    'T√™n': f"{loan.lender_name} -> {loan.borrower_name}",
                    'S·ªë D∆∞': loan.remaining_principal
                } for loan in loans]
                
                # Ti·∫øt ki·ªám
                saving_data = [{
                    'Lo·∫°i': 'Ti·∫øt ki·ªám',
                    'T√™n': saving.name,
                    'S·ªë D∆∞': saving.current_amount
                } for saving in savings]
                
                df_assets = pd.DataFrame(account_data + loan_data + saving_data)
                df_assets.to_excel(writer, sheet_name='Ti S·∫£n', index=False)
                
                # ƒê·ªãnh d·∫°ng Sheet T√†i S·∫£n
                worksheet = writer.sheets['Ti S·∫£n']
                for col_num, value in enumerate(df_assets.columns.values):
                    worksheet.write(0, col_num, value, header_format)
                worksheet.set_column('C:C', 15, money_format)
                worksheet.set_column('A:B', 30)

            # Th√¥ng b√°o th√†nh c√¥ng
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ xu·∫•t b√°o c√°o Excel th√†nh c√¥ng!\nƒê∆∞·ªùng d·∫´n: {file_path}")
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t Excel: {str(e)}")

    def create_monthly_chart(self, parent, monthly_stats):
        """T·∫°o bi·ªÉu ƒë·ªì thu chi theo th√°ng"""
        # T·∫°o bi·ªÉu ƒë·ªì v·ªõi k√≠ch th∆∞·ªõc nh·ªè h∆°n v√† n·ªÅn t·ªëi
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 3.5), facecolor=BACKGROUND['dark'])
        
        # TƒÉng kho·∫£ng c√°ch gi·ªØa c√°c subplot v√† th√™m padding
        plt.subplots_adjust(wspace=0.3, left=0.1, right=0.9, bottom=0.15, top=0.85)
        
        # Bi·ªÉu ƒë·ªì c·ªôt thu chi theo th√°ng
        months = monthly_stats['month'].tolist()
        x = range(len(months))
        width = 0.2  # Gi·∫£m ƒë·ªô r·ªông c·ªßa c·ªôt
        
        # ƒê·∫£m b·∫£o c√≥ ƒë·ªß c√°c c·ªôt d·ªØ li·ªáu
        for col in ['Thu nh·∫≠p', 'Chi ti√™u', 'G·ª≠i ti·∫øt ki·ªám', 'Chuy·ªÉn ti·ªÅn ƒë·∫øn', 'Chuy·ªÉn ti·ªÅn ƒëi']:
            if col not in monthly_stats.columns:
                monthly_stats[col] = 0
        
        # V·∫Ω c√°c c·ªôt v·ªõi ƒë·ªô r·ªông nh·ªè h∆°n v√† m√†u s·∫Øc t∆∞∆°ng ph·∫£n
        bars = []
        positions = [-width*1.5, -width/2, width/2, width*1.5]
        colors = [TRANSACTION_CONTRAST['income'], 
                 TRANSACTION_CONTRAST['expense'],
                 TRANSACTION_CONTRAST['saving'],
                 TRANSACTION_CONTRAST['transfer']]
        labels = ['Thu nh·∫≠p', 'Chi ti√™u', 'Ti·∫øt ki·ªám', 'Chuy·ªÉn kho·∫£n']
        
        # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt
        for i, (pos, col, color, label) in enumerate(zip(positions, 
                                                    ['Thu nh·∫≠p', 'Chi ti√™u', 'G·ª≠i ti·∫øt ki·ªám', 
                                                     'Chuy·ªÉn ti·ªÅn ƒë·∫øn'],
                                                    colors, labels)):
            data = monthly_stats[col].tolist()
            bar = ax1.bar([i + pos for i in x], data, width*0.8, 
                         label=label, color=color)
            bars.append(bar)
        
        # Style cho bi·ªÉu ƒë·ªì c·ªôt
        ax1.set_title('Thu Chi Theo Th√°ng', fontsize=9, color=TEXT_CONTRAST['light'], pad=10)
        ax1.set_facecolor(BACKGROUND['dark'])
        ax1.tick_params(axis='both', colors=TEXT_CONTRAST['light'], labelsize=7)
        ax1.set_xticks(x)
        ax1.set_xticklabels(months, rotation=45, ha='right')
        
        # Th√™m l∆∞·ªõi v·ªõi style m·ªõi
        ax1.grid(True, linestyle='--', alpha=0.1, color=TEXT_CONTRAST['light'])
        
        # Legend v·ªõi font size nh·ªè h∆°n v√† v·ªã tr√≠ t·ªët h∆°n
        ax1.legend(fontsize=7, 
                  loc='upper right',
                  bbox_to_anchor=(1, 1),
                  facecolor=BACKGROUND['dark'],
                  labelcolor=TEXT_CONTRAST['light'])
        
        # Bi·ªÉu ƒë·ªì tr√≤n
        totals = [
            monthly_stats['Thu nh·∫≠p'].sum(),
            monthly_stats['Chi ti√™u'].sum(),
            monthly_stats['G·ª≠i ti·∫øt ki·ªám'].sum(),
            monthly_stats['Chuy·ªÉn ti·ªÅn ƒë·∫øn'].sum()
        ]
        
        if sum(totals) > 0:
            ax2.pie(totals,
                    labels=labels,
                    colors=colors,
                    autopct='%1.1f%%',
                    textprops={'color': TEXT_CONTRAST['light'], 'fontsize': 7})
            ax2.set_title('T·ª∑ L·ªá Thu Chi', 
                         fontsize=9, 
                         color=TEXT_CONTRAST['light'],
                         pad=10)
        
        ax2.set_facecolor(BACKGROUND['dark'])
        
        # Th√™m padding cho to√†n b·ªô figure
        plt.tight_layout()
        
        # Th√™m bi·ªÉu ƒë·ªì v√†o frame v·ªõi padding nh·ªè h∆°n
        canvas = FigureCanvasTkAgg(fig, master=parent)
        canvas.draw()
        canvas_widget = canvas.get_tk_widget()
        canvas_widget.pack(fill="both", expand=True, padx=5, pady=5)